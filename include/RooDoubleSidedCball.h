/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

// New RooPdf for double sided crystall ball function
// with integrated analytic solution 



#ifndef ROODOUBLESIDEDCBALL
#define ROODOUBLESIDEDCBALL

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
 



class RooDoubleSidedCball : public RooAbsPdf {
 public:
  RooDoubleSidedCball() {} ; 
  RooDoubleSidedCball(const char *name, const char *title,
		      RooAbsReal& _x,
		      RooAbsReal& _mu,
		      RooAbsReal& _sigma,
		      RooAbsReal& _aL,
		      RooAbsReal& _nL,
		      RooAbsReal& _aR,
		      RooAbsReal& _nR);
  RooDoubleSidedCball(const RooDoubleSidedCball& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new RooDoubleSidedCball(*this,newname); }
  inline virtual ~RooDoubleSidedCball() { }
  
  Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const ;
  Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const;
  
 

protected:
  
  RooRealProxy x ;
  RooRealProxy mu ;
  RooRealProxy sigma ;
  RooRealProxy aL ;
  RooRealProxy nL ;
  RooRealProxy aR ;
  RooRealProxy nR ;
  
  Double_t evaluate() const ;
  
  
 private:
  Double_t sqrtPiOver2;
  Double_t sqrt2;


  Double_t left_integral(Double_t inf,Double_t maxi) const;
  Double_t gaus_integral(Double_t inf,Double_t maxi) const ;
  Double_t right_integral(Double_t inf,Double_t maxi) const;
  Double_t num_test(Double_t min, Double_t max, int steps)const;
  Double_t pointX(double point)const;
  //ClassDef(RooDoubleSidedCball,1) 
};
 
#endif
